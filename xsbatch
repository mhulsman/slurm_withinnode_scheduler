#!/usr/bin/env python
import xslurm_shared
import argparse
import os
import socket, httplib
import sys

parser = argparse.ArgumentParser(description='Submit XSlurm job')

parser.add_argument('-c','--cpus-per-task',type=float, default=1, help='Advise the Slurm controller that ensuing job steps will require ncpus number of processors per task. Without this option, the controller will just try to allocate one processor per task.')
parser.add_argument('--mem',type=float, default=1024, help='Specify the real memory required per node in MegaBytes. Default value is 1024.') # in mb
parser.add_argument('-t','--time', default='1:0:0', help='Advise on total run time of the job allocation. Used by scheduler to prevent scheduling on nodes that will run out of time before job completion. Acceptable time formats include "minutes", "minutes:seconds", "hours:minutes:seconds", "days-hours", "days-hours:minutes" and "days-hours:minutes:seconds".') #mintues #minutes:sconds #hours:mintues:seconds #days-[time]
parser.add_argument('-p','--partition', default='none', help='Included for SLURM compatibility, not used') # not used
parser.add_argument('-q', '--qos', default='none', help='Included for SLURM compatibility, not used') # not used
parser.add_argument('--requeue', action='store_true', help='Specifies that the batch job should eligible to being requeue. The job may be requeued after node failure. When a job is requeued, the batch script is initiated from its beginning.')

parser.add_argument('-d', '--dependency', default=None, help='Defer the start of this job until the specified dependencies have been satisfied completed. Param is of the form <type:job_id[:job_id][,type:job_id[:job_id]]> or <type:job_id[:job_id][?type:job_id[:job_id]]>, with type equal to after, afterany, afternotok, afterok, expand or singleton. All dependencies must be satifisied if the "," separtor used, any dependencies if the "?" separator is used.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton
parser.add_argument('-J', '--job-name', default=None, help='Specify a name for the job allocation. The specified name will appear along with the job id number when querying running jobs on the system. The default is the name of the batch script, or just "xsbatch" if the script is read on xsbatch''s standard input.') #after:job_id[:jobid...], afterany:jobid[:jobid...], afternotok:jobid[:jobid...], afterok:jobid[:jobid...], expand:jobid, singleton

parser.add_argument('job_args', nargs='*')
args = parser.parse_args()
print args


s = xslurm_shared.TimeoutServerProxy(xslurm_shared.job_url, allow_none = True)

cwd = os.getcwd()
env = os.environ


#parse time format
try:
    time = args.time.split('-')

    if len(time) == 2:
        days = int(time[0])
        time = time[1]
    elif len(time) == 1:
        days = 0
        time = time[0]
    else:
        raise RuntimeError
    
    time = time.split(':')
    if len(time) == 3:
        hours = int(time[0])
        time = time[1:]
    
    minutes = int(time[0])
    if len(time) == 2:
        seconds = int(time[1])
    elif len(time) == 1:
        seconds = 0
    else:
        raise RuntimeError
    
    reqtime = days * 24 * 60 + hours * 60 + minutes + (seconds > 0)

except:         
    print 'Incorrect time format: %s' % args.time
    raise

job_name = args.job_name

if not args.job_args:
    cmd = sys.stdin.readline()
    if job_name is None:
        job_name = 'xsbatch'
else:
    cmd = " ".join(args.job_args)
    if job_name is None:
        job_name = os.path.basename(args.job_args[0])



try:
    jobid = s.submit_job(job_name, cmd, cwd, env, args.cpus_per_task, args.mem, reqtime, args.requeue, args.dependency)
    print jobid
except (socket.error, httplib.HTTPException), serror:
    print 'Job submissiong failed, could not connect to XSlurm manager on ' + url
